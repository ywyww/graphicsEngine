======================= NOTE ======================= 
Почитать про указатели при разработке систем c++ (указатель на элемент std::vector нужно ли или хватит обычного элемента)
Как выделяется память под объект в std::vector? 

Подумать над взаимодействием в стиле json.
Модель хранить преобразованные координаты. Только курсор x и y.
Контроллер преобразует координаты из вьюшки и посылает их модели.
LineInputData должен посылать view контроллеру.

экранные точки: не меняют view и projection
======================= NOTE ======================= 


======================= TODO =======================
// Точно:
[ ] fix camera views: XY, XZ, YZ
[ ] processCamera in controller class
[ ] добавить работу с группами:
    [ ] удаление с объектами
    [ ] удаление без объектов
    [ ] копирование с объектами (создание новых объектов)


[ ] add 3d support (full function)
    [x] вид слева, вращение
    [x] Rotor class - состояние матриц view
    [1/3] изменение координат в настройках
        [ ] точки
        [x] линии
        [ ] полилинии
    [x] редактирование в зависимости от view
    [-] (ДАЛЕКОЕ БУДУЩЕЕ - Minimap для ориентирования)

//EndТочно

[ ] добавить плоскости на которых идет отрисовка (тянуть за ползунки)

[ ] добавить сокрытие объектов

[ ] фиксить иерархию классов: провести более точное наследование
[ ] править изменение линий: проекции

[ ] убрать viewState`ы из функций, обрабатывающих объекты
[ ] view и projection не работают: искать ошибки.
[ ] в идеале должны быть глобальные настройки сцены: общие переменные и проч. 
    + вынести сцену в отдельный класс (много рефакторинга)
    

[ ] active Node должен лежать в контроллере, но не в модели

[ ] убрать колизии при добавлении групп

[ ] turn active node from model to controller

[ ] fix operations: учитывать данные из матрицы трансформации при проведении операций.
[ ] fix scaling and mirroring
    mirror: division by the point
    scaling: absolute coordinates

[ ] check Model class: glRenderArea width and window width.
[ ] добавить флажки: isFileReading | isFileSaving в модель, активировать через рендер и обрабатывать на контроллере

[ ] при изменении имени объекта не меняется имя в группе. 
        (работа с памятью)

[ ] рефакторинг:
        вместо указателей на экземпляры модели и контроллера 
        (или рендера и проч.) поставить ссылки на объекты,
        т.к объекты существуют
        
[ ] рефакторинг:
        добавить новое звено в иерархию классов: 
        object -> drawable -> Line, Polyline и проч. 
        object чисто для transform и для полиморфизма

[ ] декомпозировать Controller на классы

[ ] фиксить деструкторы, не работают
    [ ] + фикс системы (после ввода деструктора не работает)
======================= TODO =======================

======================= TODO (OLD) =======================
[ ] fix save and read from file: refactoring to JSON 
    -> event based architecture implement

[ ] after changin operation: set transformation matrix identity and apply transformation matrix on buffer.
[ ] fix renderInputData
[ ] add color and point size into points class.
[ ] fix objects creation: do it on controller or on the objects.

[ ] divide controller into different controllers: operations, ...
[ ] add throw exception and control it.
[ ] add grouping rectangle (vmesto rezinovoy nity vo vremya grupirovki)
[ ] renderer`s grid + onn / off

[ ] setIfLineModifable function refactoring: naming, geodata.   
    // перенести все в класс линии. добавить точки для точной сверки.

[ ] turn rubber thread into renderer class.
[ ] изменить функцию определения точек: включить повороты и перемещения точки в формулы
[ ] form events in the classes.
[ ] code refactoring: Line -> 2 points, Polyline: multiply points.
[ ] add polylines editing mode
[ ] refactoring interface (нормальная палитра объектов, взаимодействие с объектом в отдельном окне: список возможных взаимодействий)

[ ] implement events system
[ ] add mode for current object e.g. modify on or off
[ ] сделать свои ивенты, чтобы контроллер мог их обрабатывать. ивенты посылает класс рендера, формируя экземпляр ивента (из imgui)
[ ] сделать штуку, которая формирует запрос из рендера к контроллеру, 
    а контроллер затем разбивает данные из рендера и выполняет инструкции
    !!! НАПИСАТЬ CONTROLLER`s HANDLER!!!
[ ] throw event into controller, here he can handle event information (and Renderer will not consist of controller functions)
[ ] fix rotation function
[ ] write info in special files, not in code 
[ ] add keyboard input to controll the lines

[ ] copy & past buttons

[ ] make own class for each type x - glRenderArea.xof objects
[ ] make structure for Controller`s objects 

[ ] make different threads for computing and rendering
[ ] make events for sending value to the status bar | now just a problem to rapid transmission of information / log bar
[ ] make a logger

[ ] Прописать объекты-обработчики, которые бы обрабатывали объекты-группы, отрисоовчные объекты и прочее (рефакторинг)
======================= TODO (OLD) ======================= 

======================= DONE ======================= 
[x] fix save/load
[x] add line in interface 
[x] coordinate system works with no pointer. For pointers overload new operator
[x] добавить поддержку перспективы
[x] camera class

[x] ошибка в классе линия: нет оператора =
[x] ошибка в деструкторе Линии.   && деструктор линии вызывается 2 раза. (не вызывая конструктор)  
[x] поправить по правилу трех
[x] реализовать конструкторы копирования
[x] add X,Y,Z axis
[x] отрисовка с учетом матрицы проецирования
[x] add projection in checking function
[+-] возможность задавать плоскость редактирования: просмотр с камеры не зависит от плоскости редактирования
[x] add operations on groups
[x] add active group mode
[x] править все для видов xy, xz, yz
[x] убрать указатели, поставить ссылки.
[x] добавить perspective и ortho    
[x] после изменения активной группы на активный объект, группа также перемещается
        (работа с условиями в цикле контроллера и коррекция режимов работы приложения)
[x] вчерашняя ошибка на час: == вместо = в присвоении объекта.
[x] рефакторинг кода: вынесение функций работы над объектами
[x] add group view
[x] add object grouping
[x] fix point belong function: one line overlaps another
[#] upload button
[#] save button
[x] file saving and loading. (boost)
[x] split serialization process into save/load
[x] operator << and operator >> for all classes. [ не нужен -> boost]
[x] add "zero" point - beginning for the transformation
[x] add mirroring
[x] refactor: centerPoint   (make in normal coordinates)
[x] add start point. (for operations)
[x] fix scale function
[#] dopisat operations
[x] fix point belong function: add transformation data into coordinates
[x] add belong to the polyline
[x] fix pointBelong (rotation etc)
[x] fix point work.
[x] dopisat` class Point`a: fragment shader and vertex shader
[x] points.
[x] add Point class 
[x] debug: problem with point class
[x] допилить изменение объектов
[x] добавить тип узлов в класс NodeGroup: таким образом можно будет легче различать тип экземпляра
[x] after change one line`s buffer, i change other line`s buffer.
[x] problem: when i use updateBuffer, my lines are decept.
[x] add rubberThread line. + code refactoring
[x] polyline mode (add different objects pallete)
[x] make polyline as std::vector of Lines class
[x] drawSceneTree: fix Object->Line inheritance
[x] optimize code: make areas without render
[x] do dynamic coordinates (dynamic VBO)
[x] modification
[x] теперь не работают функции добавления/ удаления
[x] рефакторинг класса контроллер.
[x] кинуть ивент сразу же в контроллер и там над ним поработать
[x] рефакторинг: drawLines && drawPolylines -> должны посылать данные контроллеру, а он преобразует модель 
[x] рефакторинг: подумать над хранением Model в рендерере: 
    можно убрать модель в контроллере и передавать модель экземпляром в функции контроллера из рендерера
[x] сделать геттеры константными чтобы из нее можно было только брать данные и изменять через контроллер
[x] Унифицировать ввод координат. (чтобы не было в одном месте ГЛ в другом не гл. Проебался по времени с полилайном.)
[x] Какой тип данных сувать в стд вектор? Посмотреть код, исправить многое.
[x] make super-controller: controller contains all data, super-controller calls functions
[x] make architecture: objects, nodes, etc.
[x] turn drawLines from Controller into the Renderer class
[x] refactoring: function from renderer to controller.
[x] refactoring: divide controller class on sub-classes. It has too many functions
[x] refactoring: turn line coordinates (x_n, y_n) to the controller class
[x] refactoring: long width chain: see Line->Controller->Renderer->main (width and height);
[x] refactoring: new names
[x] refactoring hard code: main.cpp: belongX while belongWindow
[x] refactoring hard code: Line.cpp: renderWindowWidth and renderWindowHeight
[x] make maps static
[x] changement for current node (menu)
[x] do basic interaction with lines
[x] global coordinates into view coordinates
[x] add tip feature: when cursor on the object, it`s show it`s name
[x] do something with incapsulation: controller and renderer class are callable from main loop. (but controller lying in renderer) 
[x] make delete button
[x] refactoring: work with controller inside a controller, not outside in renderer class
[x] fix LineInputData: don`t work.  // возможно крашится из-за динамик каста.
[x] delete nodeGroup template -> make just Node with Object pointer.
[x] enum with modes
[x] add color change in line settings
[x] button for enum to change modes
[x] active node (scene mode)
[x] fix lineName change function
[x] turn belong window to the status bar.
[x] fix object chose.
[x] add class member lineName in LineInputData class
[x] delete Scene class and turn its data to Controller;
[x] add point belong function (not working correctly)
[x] fix status bar render  
[x] object class
[x] divide renderer class to the controller class and renderer
[x] trim gl coordinates (loop)
[x] put sizes into variables (refactoring)
[x] do SDL rect for polling glViewport data.
[x] подумать над машиной состояний, которая будет следить и управлять за каждым объектом
[x] do coordinate transformation
[x] add trimCoordinates (glScissors) in variables (height, width, shifts)
[x] add window dimensions in variables (height, width)
[x] add recalculator for trimmed coordinates;
[x] scene not in main loop. put scene into controller or renderer
======================= DONE ======================= 


======================= NONE ======================= 
[-] make world grid.    // потом
[x] переключение из групмода в режим полилайна, лайна и прочего кала.
[x] возможно ошибка в самой функции do operation в Controller: не работает ссылка на функцию, т.к. объекты не нуллптр.
[x] do operation function: возможно не загружается ссылка на объект Nodes, поэтому нет ссылок на объекты группы
[x] провал в памяти: выделение места под NodeGroup*: объекты-нуллптры в группах
[-] нужно выделить место под объекты предварительно.
[-] add projection operation
[-] after adding set object to active node
[-] refactoring: xml other enum with stringss
[-] radiobutton for enum to change modes
[-] make 3d capable for isPointBelong function: Line class
[-] make unique coefficients for each object to infinity transformations flag (in scene tree)
[-] make sceneRenderer class for render gl data: division GUI renderer and GL renderer
[-] coordinateFormatter to create objects in absolute coordinates (not above window size and height)
======================= NONE ======================= 
